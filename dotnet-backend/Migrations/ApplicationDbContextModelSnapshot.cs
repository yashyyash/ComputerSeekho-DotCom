// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_backend.Repositories;

#nullable disable

namespace dotnet_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("dotnet_backend.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("announcement_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("AnnouncementText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("announcement_text");

                    b.HasKey("AnnouncementId");

                    b.ToTable("announcement");
                });

            modelBuilder.Entity("dotnet_backend.Models.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BatchId"));

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("batch_name");

                    b.Property<string>("BatchPhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("batch_photo_url");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.HasKey("BatchId");

                    b.ToTable("batch");
                });

            modelBuilder.Entity("dotnet_backend.Models.BatchCourse", b =>
                {
                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.HasKey("BatchId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("batch_course");
                });

            modelBuilder.Entity("dotnet_backend.Models.CampusLife", b =>
                {
                    b.Property<int>("CampusLifeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("campus_life_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CampusLifeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("photo_url");

                    b.HasKey("CampusLifeId");

                    b.ToTable("campus_life");
                });

            modelBuilder.Entity("dotnet_backend.Models.ClosureReason", b =>
                {
                    b.Property<int>("ClosureReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("closure_reason_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClosureReasonId"));

                    b.Property<string>("ReasonText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reason_text");

                    b.HasKey("ClosureReasonId");

                    b.ToTable("closure_reason");
                });

            modelBuilder.Entity("dotnet_backend.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<decimal>("CourseFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("course_fee");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("course_name");

                    b.Property<string>("CoursePhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("course_photo_url");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_months");

                    b.Property<string>("Syllabus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("syllabus");

                    b.HasKey("CourseId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("dotnet_backend.Models.Enquiry", b =>
                {
                    b.Property<int>("EnquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enquiry_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EnquiryId"));

                    b.Property<int?>("ClosureReasonId")
                        .HasColumnType("int")
                        .HasColumnName("closure_reason_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("EnquirerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("enquirer_name");

                    b.Property<string>("EnquirerRelation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("enquirer_relation");

                    b.Property<string>("EnquiryAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("enquiry_address");

                    b.Property<string>("EnquiryQuery")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("enquiry_query");

                    b.Property<string>("InquirerEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("inquirer_email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("StudentAge")
                        .HasColumnType("int")
                        .HasColumnName("student_age");

                    b.Property<DateTime>("StudentDob")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("student_dob");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("student_email");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("student_name");

                    b.Property<string>("StudentPhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("student_photo_url");

                    b.HasKey("EnquiryId");

                    b.HasIndex("ClosureReasonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StaffId");

                    b.ToTable("enquiry");
                });

            modelBuilder.Entity("dotnet_backend.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("faculty_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("faculty_name");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("photo_url");

                    b.Property<string>("TeachingSubject")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("teaching_subject");

                    b.HasKey("FacultyId");

                    b.ToTable("faculty");
                });

            modelBuilder.Entity("dotnet_backend.Models.FollowUp", b =>
                {
                    b.Property<int>("FollowupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("followup_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FollowupId"));

                    b.Property<int>("EnquiryId")
                        .HasColumnType("int")
                        .HasColumnName("enquiry_id");

                    b.Property<DateTime>("FollowupDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("followup_date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("FollowupId");

                    b.HasIndex("EnquiryId");

                    b.ToTable("follow_up");
                });

            modelBuilder.Entity("dotnet_backend.Models.GetInTouch", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contact_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("ContactId");

                    b.ToTable("get_in_touch");
                });

            modelBuilder.Entity("dotnet_backend.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("PaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("dotnet_backend.Models.PaymentInstallment", b =>
                {
                    b.Property<int>("InstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("installment_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InstallmentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_at");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.HasKey("InstallmentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("payment_installment");
                });

            modelBuilder.Entity("dotnet_backend.Models.Placement", b =>
                {
                    b.Property<int>("PlacementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("placement_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlacementId"));

                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("PlacedStudents")
                        .HasColumnType("int")
                        .HasColumnName("placed_students");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    b.HasKey("PlacementId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("placement");
                });

            modelBuilder.Entity("dotnet_backend.Models.Recruiter", b =>
                {
                    b.Property<int>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RecruiterId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("company_name");

                    b.Property<string>("RecruiterPhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("recruiter_photo_url");

                    b.HasKey("RecruiterId");

                    b.ToTable("recruiter");
                });

            modelBuilder.Entity("dotnet_backend.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("StaffEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("staff_email");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("staff_name");

                    b.Property<string>("StaffPhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("staff_photo_url");

                    b.Property<int>("StaffRoleId")
                        .HasColumnType("int")
                        .HasColumnName("staff_role_id");

                    b.Property<string>("StaffUsername")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("staff_username");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("StaffId");

                    b.HasIndex("StaffRoleId");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("dotnet_backend.Models.StaffRole", b =>
                {
                    b.Property<int>("StaffRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StaffRoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_name");

                    b.HasKey("StaffRoleId");

                    b.ToTable("staff_role");
                });

            modelBuilder.Entity("dotnet_backend.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dob");

                    b.Property<decimal>("DueAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("due_amount");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("int")
                        .HasColumnName("enquiry_id");

                    b.Property<int?>("RecruiterId")
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("student_name");

                    b.Property<string>("StudentPhotoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("student_photo_url");

                    b.HasKey("StudentId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EnquiryId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("student");
                });

            modelBuilder.Entity("dotnet_backend.Models.BatchCourse", b =>
                {
                    b.HasOne("dotnet_backend.Models.Batch", "Batch")
                        .WithMany("BatchCourses")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Course", "Course")
                        .WithMany("BatchCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("dotnet_backend.Models.Enquiry", b =>
                {
                    b.HasOne("dotnet_backend.Models.ClosureReason", "ClosureReason")
                        .WithMany("Enquiries")
                        .HasForeignKey("ClosureReasonId");

                    b.HasOne("dotnet_backend.Models.Course", "Course")
                        .WithMany("Enquiries")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Staff", "Staff")
                        .WithMany("Enquiries")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClosureReason");

                    b.Navigation("Course");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("dotnet_backend.Models.FollowUp", b =>
                {
                    b.HasOne("dotnet_backend.Models.Enquiry", "Enquiry")
                        .WithMany("FollowUps")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enquiry");
                });

            modelBuilder.Entity("dotnet_backend.Models.Payment", b =>
                {
                    b.HasOne("dotnet_backend.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("dotnet_backend.Models.PaymentInstallment", b =>
                {
                    b.HasOne("dotnet_backend.Models.Payment", "Payment")
                        .WithMany("PaymentInstallments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("dotnet_backend.Models.Placement", b =>
                {
                    b.HasOne("dotnet_backend.Models.Batch", "Batch")
                        .WithMany("Placements")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Course", "Course")
                        .WithMany("Placements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Recruiter", "Recruiter")
                        .WithMany("Placements")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Course");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("dotnet_backend.Models.Staff", b =>
                {
                    b.HasOne("dotnet_backend.Models.StaffRole", "StaffRole")
                        .WithMany("StaffMembers")
                        .HasForeignKey("StaffRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRole");
                });

            modelBuilder.Entity("dotnet_backend.Models.Student", b =>
                {
                    b.HasOne("dotnet_backend.Models.Batch", "Batch")
                        .WithMany("Students")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Enquiry", "Enquiry")
                        .WithMany("Students")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_backend.Models.Recruiter", "Recruiter")
                        .WithMany("Students")
                        .HasForeignKey("RecruiterId");

                    b.Navigation("Batch");

                    b.Navigation("Course");

                    b.Navigation("Enquiry");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("dotnet_backend.Models.Batch", b =>
                {
                    b.Navigation("BatchCourses");

                    b.Navigation("Placements");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("dotnet_backend.Models.ClosureReason", b =>
                {
                    b.Navigation("Enquiries");
                });

            modelBuilder.Entity("dotnet_backend.Models.Course", b =>
                {
                    b.Navigation("BatchCourses");

                    b.Navigation("Enquiries");

                    b.Navigation("Placements");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("dotnet_backend.Models.Enquiry", b =>
                {
                    b.Navigation("FollowUps");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("dotnet_backend.Models.Payment", b =>
                {
                    b.Navigation("PaymentInstallments");
                });

            modelBuilder.Entity("dotnet_backend.Models.Recruiter", b =>
                {
                    b.Navigation("Placements");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("dotnet_backend.Models.Staff", b =>
                {
                    b.Navigation("Enquiries");
                });

            modelBuilder.Entity("dotnet_backend.Models.StaffRole", b =>
                {
                    b.Navigation("StaffMembers");
                });

            modelBuilder.Entity("dotnet_backend.Models.Student", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
